//
//  Copyright 2019 ShortcutRecorder Contributors
//  CC BY 4.0
//

import XCTest

import ShortcutRecorder


class SRKeyCodeTransformerTests: XCTestCase {
    func testUserInterfaceLayoutAltersTabRendering() {
        let c = RecorderControl(frame: .zero)
        c.stringValueRespectsUserInterfaceLayoutDirection = true
        c.drawsASCIIEquivalentOfShortcut = true

        c.userInterfaceLayoutDirection = .leftToRight
        c.objectValue = Shortcut(code: UInt16(kVK_Tab), modifierFlags: [], characters: nil, charactersIgnoringModifiers: nil)
        XCTAssertEqual(c.stringValue, "\u{21E5}")

        c.userInterfaceLayoutDirection = .rightToLeft
        c.objectValue = Shortcut(code: UInt16(kVK_Tab), modifierFlags: [], characters: nil, charactersIgnoringModifiers: nil)
        XCTAssertEqual(c.stringValue, "\u{21E4}")
    }
}


class SRASCIILiteralKeyCodeTransformerTests: XCTestCase {
    func testTransform() {
        func test(code: Int, literal: String) {
            XCTContext.runActivity(named: literal) { (_) in
                XCTAssertEqual(ASCIILiteralKeyCodeTransformer.shared.transformedValue(code as NSNumber), literal)
            }
        }

        test(code: kVK_ANSI_0, literal: "0")
        test(code: kVK_ANSI_1, literal: "1")
        test(code: kVK_ANSI_2, literal: "2")
        test(code: kVK_ANSI_3, literal: "3")
        test(code: kVK_ANSI_4, literal: "4")
        test(code: kVK_ANSI_5, literal: "5")
        test(code: kVK_ANSI_6, literal: "6")
        test(code: kVK_ANSI_7, literal: "7")
        test(code: kVK_ANSI_8, literal: "8")
        test(code: kVK_ANSI_9, literal: "9")
        test(code: kVK_ANSI_A, literal: "A")
        test(code: kVK_ANSI_B, literal: "B")
        test(code: kVK_ANSI_Backslash, literal: #"\"#)
        test(code: kVK_ANSI_C, literal: "C")
        test(code: kVK_ANSI_Comma, literal: ",")
        test(code: kVK_ANSI_D, literal: "D")
        test(code: kVK_ANSI_E, literal: "E")
        test(code: kVK_ANSI_Equal, literal: "=")
        test(code: kVK_ANSI_F, literal: "F")
        test(code: kVK_ANSI_G, literal: "G")
        test(code: kVK_ANSI_Grave, literal: "`")
        test(code: kVK_ANSI_H, literal: "H")
        test(code: kVK_ANSI_I, literal: "I")
        test(code: kVK_ANSI_J, literal: "J")
        test(code: kVK_ANSI_K, literal: "K")
        test(code: kVK_ANSI_Keypad0, literal: "0")
        test(code: kVK_ANSI_Keypad1, literal: "1")
        test(code: kVK_ANSI_Keypad2, literal: "2")
        test(code: kVK_ANSI_Keypad3, literal: "3")
        test(code: kVK_ANSI_Keypad4, literal: "4")
        test(code: kVK_ANSI_Keypad5, literal: "5")
        test(code: kVK_ANSI_Keypad6, literal: "6")
        test(code: kVK_ANSI_Keypad7, literal: "7")
        test(code: kVK_ANSI_Keypad8, literal: "8")
        test(code: kVK_ANSI_Keypad9, literal: "9")
        test(code: kVK_ANSI_KeypadDecimal, literal: ".")
        test(code: kVK_ANSI_KeypadDivide, literal: "/")
        test(code: kVK_ANSI_KeypadEnter, literal: KeyCodeString.return.rawValue)
        test(code: kVK_ANSI_KeypadEquals, literal: "=")
        test(code: kVK_ANSI_KeypadMinus, literal: "-")
        test(code: kVK_ANSI_KeypadMultiply, literal: "*")
        test(code: kVK_ANSI_KeypadPlus, literal: "+")
        test(code: kVK_ANSI_L, literal: "L")
        test(code: kVK_ANSI_LeftBracket, literal: "[")
        test(code: kVK_ANSI_M, literal: "M")
        test(code: kVK_ANSI_Minus, literal: "-")
        test(code: kVK_ANSI_N, literal: "N")
        test(code: kVK_ANSI_O, literal: "O")
        test(code: kVK_ANSI_P, literal: "P")
        test(code: kVK_ANSI_Period, literal: ".")
        test(code: kVK_ANSI_Q, literal: "Q")
        test(code: kVK_ANSI_Quote, literal: "'")
        test(code: kVK_ANSI_R, literal: "R")
        test(code: kVK_ANSI_RightBracket, literal: "]")
        test(code: kVK_ANSI_S, literal: "S")
        test(code: kVK_ANSI_Semicolon, literal: ";")
        test(code: kVK_ANSI_Slash, literal: "/")
        test(code: kVK_ANSI_T, literal: "T")
        test(code: kVK_ANSI_U, literal: "U")
        test(code: kVK_ANSI_V, literal: "V")
        test(code: kVK_ANSI_W, literal: "W")
        test(code: kVK_ANSI_X, literal: "X")
        test(code: kVK_ANSI_Y, literal: "Y")
        test(code: kVK_ANSI_Z, literal: "Z")
        test(code: kVK_Delete, literal: KeyCodeString.deleteLeft.rawValue)
        test(code: kVK_DownArrow, literal: KeyCodeString.downArrow.rawValue)
        test(code: kVK_End, literal: KeyCodeString.southeastArrow.rawValue)
        test(code: kVK_Escape, literal: KeyCodeString.escape.rawValue)
        test(code: kVK_F1, literal: "F1")
        test(code: kVK_F2, literal: "F2")
        test(code: kVK_F3, literal: "F3")
        test(code: kVK_F4, literal: "F4")
        test(code: kVK_F5, literal: "F5")
        test(code: kVK_F6, literal: "F6")
        test(code: kVK_F7, literal: "F7")
        test(code: kVK_F8, literal: "F8")
        test(code: kVK_F9, literal: "F9")
        test(code: kVK_F10, literal: "F10")
        test(code: kVK_F11, literal: "F11")
        test(code: kVK_F12, literal: "F12")
        test(code: kVK_F13, literal: "F13")
        test(code: kVK_F14, literal: "F14")
        test(code: kVK_F15, literal: "F15")
        test(code: kVK_F16, literal: "F16")
        test(code: kVK_F17, literal: "F17")
        test(code: kVK_F18, literal: "F18")
        test(code: kVK_F19, literal: "F19")
        test(code: kVK_F20, literal: "F20")
        test(code: kVK_ForwardDelete, literal: KeyCodeString.deleteRight.rawValue)
        test(code: kVK_Help, literal: KeyCodeString.help.rawValue)
        test(code: kVK_Home, literal: KeyCodeString.northwestArrow.rawValue)
        test(code: kVK_ISO_Section, literal: "§")
        test(code: kVK_JIS_KeypadComma, literal: KeyCodeString.jisComma.rawValue)
        test(code: kVK_JIS_Underscore, literal: KeyCodeString.jisUnderscore.rawValue)
        test(code: kVK_JIS_Yen, literal: KeyCodeString.jisYen.rawValue)
        test(code: kVK_LeftArrow, literal: KeyCodeString.leftArrow.rawValue)
        test(code: kVK_PageDown, literal: KeyCodeString.pageDown.rawValue)
        test(code: kVK_PageUp, literal: KeyCodeString.pageUp.rawValue)
        test(code: kVK_Return, literal: KeyCodeString.returnR2L.rawValue)
        test(code: kVK_RightArrow, literal: KeyCodeString.rightArrow.rawValue)
        test(code: kVK_Space, literal: shortcutRecorderLocalizedString(forKey: "Space"))
        test(code: kVK_Tab, literal: KeyCodeString.tabRight.rawValue)
        test(code: kVK_UpArrow, literal: KeyCodeString.upArrow.rawValue)
    }

    func testReverseTransform() {
        func test(literal: String, code: Int) {
            XCTContext.runActivity(named: literal) { (_) in
                XCTAssertEqual(ASCIILiteralKeyCodeTransformer.shared.reverseTransformedValue(literal) as! Int, code)
            }
        }

        test(literal: "0", code: kVK_ANSI_0)
        test(literal: "1", code: kVK_ANSI_1)
        test(literal: "2", code: kVK_ANSI_2)
        test(literal: "3", code: kVK_ANSI_3)
        test(literal: "4", code: kVK_ANSI_4)
        test(literal: "5", code: kVK_ANSI_5)
        test(literal: "6", code: kVK_ANSI_6)
        test(literal: "7", code: kVK_ANSI_7)
        test(literal: "8", code: kVK_ANSI_8)
        test(literal: "9", code: kVK_ANSI_9)
        test(literal: "a", code: kVK_ANSI_A)
        test(literal: "A", code: kVK_ANSI_A)
        test(literal: "b", code: kVK_ANSI_B)
        test(literal: #"\"#, code: kVK_ANSI_Backslash)
        test(literal: "c", code: kVK_ANSI_C)
        test(literal: ",", code: kVK_ANSI_Comma)
        test(literal: "d", code: kVK_ANSI_D)
        test(literal: "e", code: kVK_ANSI_E)
        test(literal: "=", code: kVK_ANSI_Equal)
        test(literal: "f", code: kVK_ANSI_F)
        test(literal: "g", code: kVK_ANSI_G)
        test(literal: "`", code: kVK_ANSI_Grave)
        test(literal: "h", code: kVK_ANSI_H)
        test(literal: "i", code: kVK_ANSI_I)
        test(literal: "j", code: kVK_ANSI_J)
        test(literal: "k", code: kVK_ANSI_K)
        test(literal: "⌅", code: kVK_ANSI_KeypadEnter)
        test(literal: "l", code: kVK_ANSI_L)
        test(literal: "[", code: kVK_ANSI_LeftBracket)
        test(literal: "m", code: kVK_ANSI_M)
        test(literal: "-", code: kVK_ANSI_Minus)
        test(literal: "n", code: kVK_ANSI_N)
        test(literal: "o", code: kVK_ANSI_O)
        test(literal: "p", code: kVK_ANSI_P)
        test(literal: ".", code: kVK_ANSI_Period)
        test(literal: "q", code: kVK_ANSI_Q)
        test(literal: "'", code: kVK_ANSI_Quote)
        test(literal: "r", code: kVK_ANSI_R)
        test(literal: "]", code: kVK_ANSI_RightBracket)
        test(literal: "s", code: kVK_ANSI_S)
        test(literal: ";", code: kVK_ANSI_Semicolon)
        test(literal: "/", code: kVK_ANSI_Slash)
        test(literal: "t", code: kVK_ANSI_T)
        test(literal: "u", code: kVK_ANSI_U)
        test(literal: "v", code: kVK_ANSI_V)
        test(literal: "w", code: kVK_ANSI_W)
        test(literal: "x", code: kVK_ANSI_X)
        test(literal: "y", code: kVK_ANSI_Y)
        test(literal: "z", code: kVK_ANSI_Z)
        test(literal: "⌫", code: kVK_Delete)
        test(literal: "↓", code: kVK_DownArrow)
        test(literal: "↘", code: kVK_End)
        test(literal: "⎋", code: kVK_Escape)
        test(literal: "Esc", code: kVK_Escape)
        test(literal: "Escape", code: kVK_Escape)
        test(literal: "F1", code: kVK_F1)
        test(literal: "f1", code: kVK_F1)
        test(literal: "F2", code: kVK_F2)
        test(literal: "F3", code: kVK_F3)
        test(literal: "F4", code: kVK_F4)
        test(literal: "F5", code: kVK_F5)
        test(literal: "F6", code: kVK_F6)
        test(literal: "F7", code: kVK_F7)
        test(literal: "F8", code: kVK_F8)
        test(literal: "F9", code: kVK_F9)
        test(literal: "F10", code: kVK_F10)
        test(literal: "F11", code: kVK_F11)
        test(literal: "F12", code: kVK_F12)
        test(literal: "F13", code: kVK_F13)
        test(literal: "F14", code: kVK_F14)
        test(literal: "F15", code: kVK_F15)
        test(literal: "F16", code: kVK_F16)
        test(literal: "F17", code: kVK_F17)
        test(literal: "F18", code: kVK_F18)
        test(literal: "F19", code: kVK_F19)
        test(literal: "F20", code: kVK_F20)
        test(literal: "⌦", code: kVK_ForwardDelete)
        test(literal: "?⃝", code: kVK_Help)
        test(literal: "Help", code: kVK_Help)
        test(literal: "↖", code: kVK_Home)
        test(literal: "§", code: kVK_ISO_Section)
        test(literal: "←", code: kVK_LeftArrow)
        test(literal: "⇟", code: kVK_PageDown)
        test(literal: "⇞", code: kVK_PageUp)
        test(literal: "↩", code: kVK_Return)
        test(literal: "Enter", code: kVK_Return)
        test(literal: "→", code: kVK_RightArrow)
        test(literal: " ", code: kVK_Space)
        test(literal: "Space", code: kVK_Space)
        test(literal: "⇥", code: kVK_Tab)
        test(literal: "⇤", code: kVK_Tab)
        test(literal: "Tab", code: kVK_Tab)
        test(literal: "↑", code: kVK_UpArrow)
        test(literal: "＿", code: kVK_JIS_Underscore)
        test(literal: "、", code: kVK_JIS_KeypadComma)
        test(literal: "¥", code: kVK_JIS_Yen)
        test(literal: "*", code: kVK_ANSI_KeypadMultiply);
        test(literal: "+", code: kVK_ANSI_KeypadPlus);
    }
}


class SRASCIISymbolicKeyCodeTransformerTests: XCTestCase {
    func testTransform() {
        func test(code: Int, symbol: String) {
            XCTContext.runActivity(named: symbol) { (_) in
                XCTAssertEqual(ASCIISymbolicKeyCodeTransformer.shared.transformedValue(code as NSNumber), symbol)
            }
        }

        test(code: kVK_ANSI_0, symbol: "0")
        test(code: kVK_ANSI_1, symbol: "1")
        test(code: kVK_ANSI_2, symbol: "2")
        test(code: kVK_ANSI_3, symbol: "3")
        test(code: kVK_ANSI_4, symbol: "4")
        test(code: kVK_ANSI_5, symbol: "5")
        test(code: kVK_ANSI_6, symbol: "6")
        test(code: kVK_ANSI_7, symbol: "7")
        test(code: kVK_ANSI_8, symbol: "8")
        test(code: kVK_ANSI_9, symbol: "9")
        test(code: kVK_ANSI_A, symbol: "a")
        test(code: kVK_ANSI_B, symbol: "b")
        test(code: kVK_ANSI_Backslash, symbol: #"\"#)
        test(code: kVK_ANSI_C, symbol: "c")
        test(code: kVK_ANSI_Comma, symbol: ",")
        test(code: kVK_ANSI_D, symbol: "d")
        test(code: kVK_ANSI_E, symbol: "e")
        test(code: kVK_ANSI_Equal, symbol: "=")
        test(code: kVK_ANSI_F, symbol: "f")
        test(code: kVK_ANSI_G, symbol: "g")
        test(code: kVK_ANSI_Grave, symbol: "`")
        test(code: kVK_ANSI_H, symbol: "h")
        test(code: kVK_ANSI_I, symbol: "i")
        test(code: kVK_ANSI_J, symbol: "j")
        test(code: kVK_ANSI_K, symbol: "k")
        test(code: kVK_ANSI_Keypad0, symbol: "0")
        test(code: kVK_ANSI_Keypad1, symbol: "1")
        test(code: kVK_ANSI_Keypad2, symbol: "2")
        test(code: kVK_ANSI_Keypad3, symbol: "3")
        test(code: kVK_ANSI_Keypad4, symbol: "4")
        test(code: kVK_ANSI_Keypad5, symbol: "5")
        test(code: kVK_ANSI_Keypad6, symbol: "6")
        test(code: kVK_ANSI_Keypad7, symbol: "7")
        test(code: kVK_ANSI_Keypad8, symbol: "8")
        test(code: kVK_ANSI_Keypad9, symbol: "9")
        test(code: kVK_ANSI_KeypadDecimal, symbol: ".")
        test(code: kVK_ANSI_KeypadDivide, symbol: "/")
        test(code: kVK_ANSI_KeypadEnter, symbol: unicharToString(unichar(NSEnterCharacter)))
        test(code: kVK_ANSI_KeypadEquals, symbol: "=")
        test(code: kVK_ANSI_KeypadMinus, symbol: "-")
        test(code: kVK_ANSI_KeypadMultiply, symbol: "*")
        test(code: kVK_ANSI_KeypadPlus, symbol: "+")
        test(code: kVK_ANSI_L, symbol: "l")
        test(code: kVK_ANSI_LeftBracket, symbol: "[")
        test(code: kVK_ANSI_M, symbol: "m")
        test(code: kVK_ANSI_Minus, symbol: "-")
        test(code: kVK_ANSI_N, symbol: "n")
        test(code: kVK_ANSI_O, symbol: "o")
        test(code: kVK_ANSI_P, symbol: "p")
        test(code: kVK_ANSI_Period, symbol: ".")
        test(code: kVK_ANSI_Q, symbol: "q")
        test(code: kVK_ANSI_Quote, symbol: "'")
        test(code: kVK_ANSI_R, symbol: "r")
        test(code: kVK_ANSI_RightBracket, symbol: "]")
        test(code: kVK_ANSI_S, symbol: "s")
        test(code: kVK_ANSI_Semicolon, symbol: ";")
        test(code: kVK_ANSI_Slash, symbol: "/")
        test(code: kVK_ANSI_T, symbol: "t")
        test(code: kVK_ANSI_U, symbol: "u")
        test(code: kVK_ANSI_V, symbol: "v")
        test(code: kVK_ANSI_W, symbol: "w")
        test(code: kVK_ANSI_X, symbol: "x")
        test(code: kVK_ANSI_Y, symbol: "y")
        test(code: kVK_ANSI_Z, symbol: "z")
        test(code: kVK_Delete, symbol: unicharToString(unichar(NSBackspaceCharacter)))
        test(code: kVK_DownArrow, symbol: unicharToString(unichar(NSDownArrowFunctionKey)))
        test(code: kVK_End, symbol: unicharToString(unichar(NSEndFunctionKey)))
        test(code: kVK_Escape, symbol: "\u{1b}")
        test(code: kVK_F1, symbol: unicharToString(unichar(NSF1FunctionKey)))
        test(code: kVK_F2, symbol: unicharToString(unichar(NSF2FunctionKey)))
        test(code: kVK_F3, symbol: unicharToString(unichar(NSF3FunctionKey)))
        test(code: kVK_F4, symbol: unicharToString(unichar(NSF4FunctionKey)))
        test(code: kVK_F5, symbol: unicharToString(unichar(NSF5FunctionKey)))
        test(code: kVK_F6, symbol: unicharToString(unichar(NSF6FunctionKey)))
        test(code: kVK_F7, symbol: unicharToString(unichar(NSF7FunctionKey)))
        test(code: kVK_F8, symbol: unicharToString(unichar(NSF8FunctionKey)))
        test(code: kVK_F9, symbol: unicharToString(unichar(NSF9FunctionKey)))
        test(code: kVK_F10, symbol: unicharToString(unichar(NSF10FunctionKey)))
        test(code: kVK_F11, symbol: unicharToString(unichar(NSF11FunctionKey)))
        test(code: kVK_F12, symbol: unicharToString(unichar(NSF12FunctionKey)))
        test(code: kVK_F13, symbol: unicharToString(unichar(NSF13FunctionKey)))
        test(code: kVK_F14, symbol: unicharToString(unichar(NSF14FunctionKey)))
        test(code: kVK_F15, symbol: unicharToString(unichar(NSF15FunctionKey)))
        test(code: kVK_F16, symbol: unicharToString(unichar(NSF16FunctionKey)))
        test(code: kVK_F17, symbol: unicharToString(unichar(NSF17FunctionKey)))
        test(code: kVK_F18, symbol: unicharToString(unichar(NSF18FunctionKey)))
        test(code: kVK_F19, symbol: unicharToString(unichar(NSF19FunctionKey)))
        test(code: kVK_F20, symbol: unicharToString(unichar(NSF20FunctionKey)))
        test(code: kVK_ForwardDelete, symbol: unicharToString(unichar(NSDeleteCharacter)))
        test(code: kVK_Help, symbol: unicharToString(unichar(NSHelpFunctionKey)))
        test(code: kVK_Home, symbol: unicharToString(unichar(NSHomeFunctionKey)))
        test(code: kVK_ISO_Section, symbol: "§")
        test(code: kVK_JIS_KeypadComma, symbol: KeyCodeString.jisComma.rawValue)
        test(code: kVK_JIS_Underscore, symbol: KeyCodeString.jisUnderscore.rawValue)
        test(code: kVK_JIS_Yen, symbol: KeyCodeString.jisYen.rawValue)
        test(code: kVK_LeftArrow, symbol: unicharToString(unichar(NSLeftArrowFunctionKey)))
        test(code: kVK_PageDown, symbol: unicharToString(unichar(NSPageDownFunctionKey)))
        test(code: kVK_PageUp, symbol: unicharToString(unichar(NSPageUpFunctionKey)))
        test(code: kVK_Return, symbol: unicharToString(unichar(NSCarriageReturnCharacter)))
        test(code: kVK_RightArrow, symbol: unicharToString(unichar(NSRightArrowFunctionKey)))
        test(code: kVK_Space, symbol: " ")
        test(code: kVK_Tab, symbol: unicharToString(unichar(NSTabCharacter)))
        test(code: kVK_UpArrow, symbol: unicharToString(unichar(NSUpArrowFunctionKey)))
    }

    func testReverseTransform() {
        func test(symbol: String, code: Int) {
            XCTContext.runActivity(named: symbol) { (_) in
                XCTAssertEqual(ASCIISymbolicKeyCodeTransformer.shared.reverseTransformedValue(symbol) as! Int, code)
            }
        }

        test(symbol: "0", code: kVK_ANSI_0)
        test(symbol: "1", code: kVK_ANSI_1)
        test(symbol: "2", code: kVK_ANSI_2)
        test(symbol: "3", code: kVK_ANSI_3)
        test(symbol: "4", code: kVK_ANSI_4)
        test(symbol: "5", code: kVK_ANSI_5)
        test(symbol: "6", code: kVK_ANSI_6)
        test(symbol: "7", code: kVK_ANSI_7)
        test(symbol: "8", code: kVK_ANSI_8)
        test(symbol: "9", code: kVK_ANSI_9)
        test(symbol: "a", code: kVK_ANSI_A)
        test(symbol: "A", code: kVK_ANSI_A)
        test(symbol: "b", code: kVK_ANSI_B)
        test(symbol: #"\"#, code: kVK_ANSI_Backslash)
        test(symbol: "c", code: kVK_ANSI_C)
        test(symbol: ",", code: kVK_ANSI_Comma)
        test(symbol: "d", code: kVK_ANSI_D)
        test(symbol: "e", code: kVK_ANSI_E)
        test(symbol: "=", code: kVK_ANSI_Equal)
        test(symbol: "f", code: kVK_ANSI_F)
        test(symbol: "g", code: kVK_ANSI_G)
        test(symbol: "`", code: kVK_ANSI_Grave)
        test(symbol: "h", code: kVK_ANSI_H)
        test(symbol: "i", code: kVK_ANSI_I)
        test(symbol: "j", code: kVK_ANSI_J)
        test(symbol: "k", code: kVK_ANSI_K)
        test(symbol: unicharToString(unichar(NSEnterCharacter)), code: kVK_ANSI_KeypadEnter)
        test(symbol: "l", code: kVK_ANSI_L)
        test(symbol: "[", code: kVK_ANSI_LeftBracket)
        test(symbol: "m", code: kVK_ANSI_M)
        test(symbol: "-", code: kVK_ANSI_Minus)
        test(symbol: "n", code: kVK_ANSI_N)
        test(symbol: "o", code: kVK_ANSI_O)
        test(symbol: "p", code: kVK_ANSI_P)
        test(symbol: ".", code: kVK_ANSI_Period)
        test(symbol: "q", code: kVK_ANSI_Q)
        test(symbol: "'", code: kVK_ANSI_Quote)
        test(symbol: "r", code: kVK_ANSI_R)
        test(symbol: "]", code: kVK_ANSI_RightBracket)
        test(symbol: "s", code: kVK_ANSI_S)
        test(symbol: ";", code: kVK_ANSI_Semicolon)
        test(symbol: "/", code: kVK_ANSI_Slash)
        test(symbol: "t", code: kVK_ANSI_T)
        test(symbol: "u", code: kVK_ANSI_U)
        test(symbol: "v", code: kVK_ANSI_V)
        test(symbol: "w", code: kVK_ANSI_W)
        test(symbol: "x", code: kVK_ANSI_X)
        test(symbol: "y", code: kVK_ANSI_Y)
        test(symbol: "z", code: kVK_ANSI_Z)
        test(symbol: unicharToString(unichar(NSBackspaceCharacter)), code: kVK_Delete)
        test(symbol: unicharToString(unichar(NSDownArrowFunctionKey)), code: kVK_DownArrow)
        test(symbol: unicharToString(unichar(NSEndFunctionKey)), code: kVK_End)
        test(symbol: "\u{1b}", code: kVK_Escape)
        test(symbol: unicharToString(unichar(NSF1FunctionKey)), code: kVK_F1)
        test(symbol: unicharToString(unichar(NSF2FunctionKey)), code: kVK_F2)
        test(symbol: unicharToString(unichar(NSF3FunctionKey)), code: kVK_F3)
        test(symbol: unicharToString(unichar(NSF4FunctionKey)), code: kVK_F4)
        test(symbol: unicharToString(unichar(NSF5FunctionKey)), code: kVK_F5)
        test(symbol: unicharToString(unichar(NSF6FunctionKey)), code: kVK_F6)
        test(symbol: unicharToString(unichar(NSF7FunctionKey)), code: kVK_F7)
        test(symbol: unicharToString(unichar(NSF8FunctionKey)), code: kVK_F8)
        test(symbol: unicharToString(unichar(NSF9FunctionKey)), code: kVK_F9)
        test(symbol: unicharToString(unichar(NSF10FunctionKey)), code: kVK_F10)
        test(symbol: unicharToString(unichar(NSF11FunctionKey)), code: kVK_F11)
        test(symbol: unicharToString(unichar(NSF12FunctionKey)), code: kVK_F12)
        test(symbol: unicharToString(unichar(NSF13FunctionKey)), code: kVK_F13)
        test(symbol: unicharToString(unichar(NSF14FunctionKey)), code: kVK_F14)
        test(symbol: unicharToString(unichar(NSF15FunctionKey)), code: kVK_F15)
        test(symbol: unicharToString(unichar(NSF16FunctionKey)), code: kVK_F16)
        test(symbol: unicharToString(unichar(NSF17FunctionKey)), code: kVK_F17)
        test(symbol: unicharToString(unichar(NSF18FunctionKey)), code: kVK_F18)
        test(symbol: unicharToString(unichar(NSF19FunctionKey)), code: kVK_F19)
        test(symbol: unicharToString(unichar(NSF20FunctionKey)), code: kVK_F20)
        test(symbol: unicharToString(unichar(NSDeleteCharacter)), code: kVK_ForwardDelete)
        test(symbol: unicharToString(unichar(NSHelpFunctionKey)), code: kVK_Help)
        test(symbol: unicharToString(unichar(NSHomeFunctionKey)), code: kVK_Home)
        test(symbol: "§", code: kVK_ISO_Section)
        test(symbol: unicharToString(unichar(NSLeftArrowFunctionKey)), code: kVK_LeftArrow)
        test(symbol: unicharToString(unichar(NSPageDownFunctionKey)), code: kVK_PageDown)
        test(symbol: unicharToString(unichar(NSPageUpFunctionKey)), code: kVK_PageUp)
        test(symbol: unicharToString(unichar(NSCarriageReturnCharacter)), code: kVK_Return)
        test(symbol: unicharToString(unichar(NSRightArrowFunctionKey)), code: kVK_RightArrow)
        test(symbol: " ", code: kVK_Space)
        test(symbol: unicharToString(unichar(NSTabCharacter)), code: kVK_Tab)
        test(symbol: unicharToString(unichar(NSBackTabCharacter)), code: kVK_Tab)
        test(symbol: unicharToString(unichar(NSUpArrowFunctionKey)), code: kVK_UpArrow)
        test(symbol: "＿", code: kVK_JIS_Underscore)
        test(symbol: "、", code: kVK_JIS_KeypadComma)
        test(symbol: "¥", code: kVK_JIS_Yen)
        test(symbol: "*", code: kVK_ANSI_KeypadMultiply);
        test(symbol: "+", code: kVK_ANSI_KeypadPlus);
    }
}
